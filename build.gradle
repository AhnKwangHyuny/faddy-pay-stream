plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	// open ai 3 spec
	id 'com.epages.restdocs-api-spec' version "0.17.1"
	id 'org.hidetake.swagger.generator' version '2.18.2'
	id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

group = 'faddy'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	// Confluent Maven 저장소 추가
	maven {
		url = uri("https://packages.confluent.io/maven/")
	}
	maven {
		url = uri("https://maven.repository.confluent.io/public/")
	}
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', "2024.0.1")
	set('springModulithVersion', "1.3.4")
}

dependencies {
	// Web & API
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-web-services")
	implementation("org.springframework.boot:spring-boot-starter-validation")
	implementation("org.springframework.boot:spring-boot-starter-actuator")

	// Database & ORM
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
//	implementation("org.flywaydb:flyway-core")
//	implementation("org.flywaydb:flyway-mysql")
	runtimeOnly("com.h2database:h2")
	runtimeOnly("com.mysql:mysql-connector-j")

	// Security
//	implementation("org.springframework.boot:spring-boot-starter-security")
//	implementation("org.thymeleaf.extras:thymeleaf-extras-springsecurity6")

	// Templates
	implementation("org.springframework.boot:spring-boot-starter-thymeleaf")

	// Message Broker & Event Streaming
	implementation("org.springframework.cloud:spring-cloud-stream")
	implementation("org.springframework.cloud:spring-cloud-stream-binder-kafka")
	implementation("org.springframework.kafka:spring-kafka")
	implementation("org.apache.avro:avro:1.11.3")
	implementation("io.confluent:kafka-avro-serializer:7.0.1")

	// Spring Modulith
	implementation("org.springframework.modulith:spring-modulith-events-api")
	implementation("org.springframework.modulith:spring-modulith-starter-core")
	implementation("org.springframework.modulith:spring-modulith-starter-jpa")
	runtimeOnly("org.springframework.modulith:spring-modulith-events-kafka")

	// Retrofit and OkHttp
	implementation("com.squareup.retrofit2:retrofit:2.10.0")
	implementation("com.squareup.retrofit2:converter-jackson:2.10.0")
	implementation("com.squareup.retrofit2:converter-gson:2.10.0")
	implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.0")
	implementation("com.google.code.gson:gson")

	// Development Tools
	compileOnly("org.projectlombok:lombok")
	annotationProcessor("org.projectlombok:lombok")
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	// developmentOnly("org.springframework.boot:spring-boot-docker-compose")

	// Testing
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.cloud:spring-cloud-stream-test-binder")
	testImplementation("org.springframework.kafka:spring-kafka-test")
	testImplementation("org.springframework.modulith:spring-modulith-starter-test")
	testImplementation("org.springframework.security:spring-security-test")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")

	// REST Docs & API Documentation
	testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
	testImplementation("org.springframework.restdocs:spring-restdocs-asciidoctor")
	testImplementation("com.epages:restdocs-api-spec-mockmvc:0.17.1")
	testImplementation("org.junit.jupiter:junit-jupiter-api")
	testImplementation("org.junit.jupiter:junit-jupiter-engine")
	testImplementation("org.mockito:mockito-junit-jupiter")

	// Jackson for JSON handling
	implementation("com.fasterxml.jackson.core:jackson-databind")
	implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

	// Mockito
	testImplementation("org.mockito:mockito-core:3.3.0")
	testImplementation("com.squareup.retrofit2:retrofit-mock:2.10.0")

	testAnnotationProcessor("org.projectlombok:lombok")
	testImplementation("org.projectlombok:lombok")
	testImplementation("com.google.code.gson:gson")
	testImplementation("org.springframework.boot:spring-boot-starter-actuator")

	// Retrofit , okHttp 설정
	implementation 'com.squareup.retrofit2:retrofit:2.10.0'
	implementation 'com.squareup.retrofit2:converter-jackson:2.10.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.10.0'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.0'
	implementation 'com.google.code.gson:gson'

	// Jakarta Validation API
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	// 표현식 언어(Expression Language) 구현체 - 오류 메시지에서 표현식 사용 시 필요
	implementation 'org.glassfish:jakarta.el:5.0.0-M1'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'

	//kafka 설정
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.avro:avro:1.11.3'
	implementation'io.confluent:kafka-avro-serializer:7.0.1'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.withType(com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask) {
	fieldVisibility = "PRIVATE"
	createSetters = false
	source = "src/main/avro"
	outputDir = file("build/generated-sources")
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

openapi3 {
	server = "https://localhost:8080" // 직접 프로퍼티 설정
	title = "FaddyEcommerce - Order/Payment"
	description = "Order/Payment API"
	version = "0.1.0"
	format = "yaml" // or json
}

// Swagger UI 생성을 위한 태스크 추가
tasks.register('copyOasToSwagger', Copy) {
	delete("src/main/resources/static/swagger-ui/openapi3.yaml") // 기존 yaml 파일 삭제
	from("$buildDir/api-spec/openapi3.yaml") // 복제할 yaml 파일 타겟팅
	into("src/main/resources/static/swagger-ui/.") // 타겟 디렉토리로 파일 복제
	dependsOn("openapi3") // openapi3 task가 먼저 실행되도록 설정
}